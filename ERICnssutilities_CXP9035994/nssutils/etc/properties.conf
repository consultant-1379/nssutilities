############################
# PUBLIC COMMON PROPERTIES #
############################
#
# LOGGING
#
logger_name = nssutilities
exception_logger_name = nssutilities-exception
syslog_logger_name = nssutilities-syslog
console_log_file = console.log
debug_log_file = debug.log
zipped_debug_log = debug.tgz
exception_log_file = exception.log
max_debug_log_size_in_mb = 300
log_dir = /var/log/nssutils

# TERMINAL COLOURS
#
supported_text_colors = cyan, blue, green, red, purple, yellow, white
print_color = true

#
# ALPHABET AND NUMBERS
#

alphabet = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
numbers = 9876543210
number_random_characters = 8

###################################
# PUBLIC TOOL-SPECIFIC PROPERTIES #
###################################
# NODE POPULATOR
#
node_populator_num_workers = 3
node_populator_num_fetch_workers = 20

# Node version mappings
mim_to_identity_map = "{'D.1.44': '2136-716-720', 'D.1.189': '3497-562-344', 'E.1.63': '4322-436-393', 'E.1.226': '0828-946-594', 'E.1.236': '4053-309-342', 'E.1.237': '5502-135-558', 'E.1.239': '4322-940-032', 'F.1.100': '6185-266-590', 'F.1.101': '2792-305-136', 'F.1.106': '1777-370-163', 'F.1.107': '3958-644-341', 'F.1.108': '6607-651-025', 'G.1.60': '2779-263-625', 'G.1.80': '5324-497-111', 'G.1.101': '1826-077-154', 'G.1.107': '6679-586-950', 'G.1.120': '5981-462-912', 'G.1.123': '1147-458-334', 'G.1.220': '1116-673-956'}"
# Property that allows or not the node parse to continue even if MIM version and IP ADDRESS attributes are not correct
allow_node_parse_if_wrong_attr = false
add_netsim_host_to_node_name = true
skip_subnetwork_in_parsing = false

com_ecim_primary_types = SGSN,MSRBS_V2,RadioNode,MSRBS_V1,EPG-SSR,EPG,SAPC,VEPG,RadioTNode,MTAS,SBG,CSCF,WMG,EPDG,vWMG,DSC,C608,TCU04,BSC,vWCG,WCG,vEME,EME
cpp_primary_types = ERBS,MGW,RNC,RBS
er6000_primary_types = SpitFire,Router_6672
mltn_primary_types = MLTN,LH,MINI-LINK-6352,MINI-LINK-6351,PT2020,switch-6391,Fronthaul-6392,MINI-LINK-PT
tsp_primary_types = CSCF-TSP,MTAS-TSP,HSS-FE-TSP,cSAPC-TSP,CCN-TSP,VPN-TSP
transport_primary_types = JUNIPER,CISCO,Fronthaul-6080
stn_primary_types = SIU02,TCU02
isite_primary_types = SBG-IS
apg_primary_types = MSC-DB,IP-STP,vMSC,vIP-STP,ECM,STP,MSC-BC-BSP

SGSN_15B = "{'oss_model_identity':'2085-555-613', 'revision':'R50L01', 'identity':'CXS101289'}"
SGSN_15A = "{'oss_model_identity':'6530-077-820', 'revision':'R2D15', 'identity':'CXS101289/14'}"
SGSN_14B = "{'oss_model_identity':'6270-694-590', 'revision':'R12A27', 'identity':'CXS101289/13'}"
MSRBS_V2_15B = "{'oss_model_identity':'4141-992-104', 'revision':'R14XS', 'identity':'CXP9024418/1'}"
MSRBS_V2_16A = "{'oss_model_identity':'5003-893-788', 'revision':'R3BB', 'identity':'CXP9024418/2'}}"

#############################
# PRIVATE COMMON PROPERTIES #
#############################

#
# PATHS
#
temp_dir = /tmp/nssutils
daemon_dir = /tmp/nssutils/daemon

####################################
# PRIVATE TOOL-SPECIFIC PROPERTIES #
####################################


# Do not edit these
production_dir = /opt/ericsson/nssutils

#
# NODE POPULATOR
#
supported_node_operations = parse, update, create, manage, unmanage, sync, delete, populate
data_file_dir = nodes
remove_uncreated_nodes_from_file = false

# ARNE parse config
subnetwork_xpath = ./Create/SubNetwork
mecontext_xpath = ./ManagedElement
netsim_xpath = ./Netsim
simulation_xpath = ./Simulation


# The arne_parse_values parameter is a list of the data values to be parsed from the ARNE XML
# Each entry of the list should contain: <column name>||<xpath>||<element attribute name>
# NOTE: If you are parsing multiple ARNE XML files that have different element attribute types, you can delimit these types with a semi-colon eg. [string;ip_v4]
# NOTE: The order of the columns in the output csv file is controlled by csv_headings parameter

# NOTE: If you add an entry to arne parse values, you must add its heading to csv_headings.
# NOTE: In order to support multiple ne types, it is recommended to not remove entries from arne_parse_values and headings from csv_headings at the present time.
multi_value_delimiter = |


csv_headings = node_name, node_ip, mim_version, oss_model_identity, revision, identity, security_state, supported_protocols, netconf, snmp, snmp_versions, snmp_community, snmp_security_name, snmp_authentication_method, snmp_encryption_method, normal_user, normal_password, secure_user, secure_password, primary_type, node_version, em_url, simulation, netsim_fqdn, subnetwork, managed_element_type, group_data, invalid_fields, source_type, associated_site, time_zone, cluster_ip, apnodeAIpAddress, apnodeBIpAddress
supported_primary_types = ERBS, SGSN, MSRBS_V2, RadioNode, MGW, SpitFire, Router_6672, MLTN, MSRBS_V1, EPG-SSR, EPG, RNC, VEPG, SAPC, RBS, RadioTNode, MTAS, SBG, CSCF, EPDG, WMG, vWMG, DSC, CSCF-TSP, MTAS-TSP, HSS-FE-TSP, cSAPC-TSP, CCN-TSP, VPN-TSP, JUNIPER, CISCO, SIU02, TCU02, TCU04, C608, Fronthaul-6080, LH, MINI-LINK-6352, SBG-IS, BSC, MSC-DB, IP-STP, vMSC, vIP-STP, ECM, STP, MSC-BC-BSP, MINI-LINK-6351, PT2020, switch-6391, Fronthaul-6392, PT, vWCG, WCG, vEME, EME
supported_ne_models = BGF, BSC, BSP, CCN-TSP, CISCO-ASR900, CISCO-ASR9000, cSAPC-TSP, CSCF, CSCF-TSP, DSC, EME, EPG, ERBS, ESC, FRONTHAUL-6020, FRONTHAUL-6080, Fronthaul-6392, GenericESA, HLR-FE, HSS-FE, HSS-FE-TSP, IP-STP, IP-STP-BSP, IPWorks, JUNIPER-MX, MGW, MINI-LINK-6351, MINI-LINK-6352, MINI-LINK-CN210, MINI-LINK-CN510R1, MINI-LINK-CN810R1, MINI-LINK-CN810R2, MINI-LINK-Indoor, MINI-LINK-PT2020, MRF, MSC-BC-BSP, MSC-BC-IS, MSC-DB, MSC-DB-BSP, MSRBS_V1, MTAS, MTAS-TSP, RadioNode, RadioTNode, RBS, RNC, Router6274, Router6672, Router6675, Router6x71, Router8800, RVNFM, SAPC, SBG, SBG-IS, SGSN-MME, SIU02, SSR, Switch-6391, TCU02, UPG, vBGF, vBNG, vCSCF, vDSC, vEME, VEPG, vHSS-FE, vIP-STP, vIPWorks, vMRF, vMSC, vMTAS, VPN-TSP, vPP, vSBG, vSD, vSGSN-MME, vUPG, vWCG, vWMG, WMG

ERBS_platformtype = CPP
ERBS_netype = ERBS

MGW_platformtype = CPP
MGW_netype = MGW

SGSN_platformtype = SGSN_MME
SGSN_netype = SGSN-MME

MSRBS_V2_platformtype = CBA
MSRBS_V2_netype = RadioNode

RadioNode_netype = RadioNode

Router_6672_platformtype = ER6000
Router_6672_netype = Router6672

SpitFire_platformtype = ER6000
SpitFire_netype = Router6672

TSP_platformtype = TSP

# SubNetwork namespace & version
subnetwork_namespace = OSS_TOP
subnetwork_version = 3.0.0

# Mecontext namespace & version
mecontext_namespace = OSS_TOP
mecontext_version = 3.0.0

# Network element namespace & version
network_element_namespace = OSS_NE_DEF
network_element_version = 2.0.0

# connectivity_info namespace & version & port
connectivity_info_namespace = CPP_MED
comecim_connectivity_info_namespace = COM_MED
connectivity_info_version = 1.0.0
comecim_connectivity_info_version = 1.1.0
connectivity_info_port = 80
comecim_connectivity_info_port = 22

# CREATE operation (add node)
create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, platformType={platformtype}, ossModelIdentity="{model_identity}", ossPrefix="{subnetwork}" -ns={namespace} -version={version}"
create_network_element_cmd_verification = 1 instance(s) updated
noidentity_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, platformType={platformtype}, ossPrefix="{subnetwork}" -ns={namespace} -version={version}"
create_connectivity_info_cmd = "cmedit create NetworkElement={node_id},CppConnectivityInformation=1 CppConnectivityInformationId=1, ipAddress="{ip_address}", port={port} -ns={namespace} -version={version}"
create_connectivity_info_cmd_verification = 1 instance(s) updated
set_node_security_cmd = "secadm credentials create --rootusername root --rootuserpassword dummy --secureusername "{secure_user}" --secureuserpassword "{secure_password}" --normalusername "{normal_user}" --normaluserpassword "{normal_password}" -n "<node_id>""
check_subnetwork_cmd = "cmedit get {subnetwork}"
create_subnetwork_cmd = "cmedit create {subnetwork} SubNetworkId={subnetwork_id} -ns={namespace} -version={version}"
check_subnetwork_childs_cmd = "cmedit get * SubNetwork.SubNetworkId=={subnetwork},*"
skip_create_cmd_validation = false
creation_stop_on_fail = true

# CREATE operation (add node for comecim)
comecim_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, ossModelIdentity="{model_identity}", ossPrefix="{subnetwork},MeContext={node_id}", neProductVersion=[(revision="{revision}",identity="{identity}")] -ns={namespace} -version={version}"
noidentity_comecim_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, ossPrefix="{subnetwork}" -ns={namespace} -version={version}"
nomecontext_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, ossModelIdentity="{model_identity}", ossPrefix="{subnetwork}", neProductVersion=[(revision="{revision}",identity="{identity}")] -ns={namespace} -version={version}"
noidentity_nomecontext_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, ossPrefix="{subnetwork}" -ns={namespace} -version={version}"
comecim_create_connectivity_info_cmd = "cmedit create NetworkElement={node_id},ComConnectivityInformation=1 ComConnectivityInformationId=1, ipAddress="{ip_address}", port={port} -ns={namespace} -version={version}"
comecim_create_connectivity_info_cmd_snmp = "cmedit create NetworkElement={node_id},ComConnectivityInformation=1 ComConnectivityInformationId=1, ipAddress="{ip_address}", port={port}, snmpReadCommunity={public}, snmpWriteCommunity={public} -ns={namespace} -version={version}"
comecim_set_node_security_cmd = "secadm credentials create --secureusername "{secure_user}" --secureuserpassword "{secure_password}" -n "<node_id>""

# CREATE operation (add node for er6000)
er6000_create_mecontext_cmd = "cmedit create {subnetwork},MeContext={node_id} MeContextId={node_id}, neType={netype}, platformType={platformtype} -namespace={namespace} -version={version}"
er6000_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, ossPrefix="{subnetwork}MeContext={node_id}" -ns={namespace} -version={version}"
er6000_nomecontext_create_network_element_cmd = "cmedit create NetworkElement={node_id} networkElementId={node_id}, neType={netype}, ossPrefix="{subnetwork}" -ns={namespace} -version={version}"
er6000_create_connectivity_info_cmd = "cmedit create NetworkElement={node_id},Er6000ConnectivityInformation=1 ComConnectivityInformationId=1, ipAddress="{ip_address}", port={port}, snmpAgentPort={snmp_agent_port}, snmpSecurityLevel={snmp_security_level}, snmpSecurityName={snmp_security_name}, snmpVersion={snmp_version} -ns={namespace} -version={version}"
er6000_set_node_security_cmd = "secadm credentials create --secureusername "{secure_user}" --secureuserpassword "{secure_password}" -n "<node_id>""
er6000_set_snmp_cmd = "secadm snmp authpriv --auth_algo {auth_algo} --auth_password "{auth_password}" --priv_algo {priv_algo} --priv_password "{priv_password}" -n "<node_id>""

# MANAGE operation (enable node management)
cm_manage_cmd = "cmedit set NetworkElement=<node_id>,CmNodeHeartbeatSupervision=1 active={boolean}"
cm_manage_status_cmd = "cmedit get NetworkElement=<node_id>,CmFunction=1;NetworkElement=<node_id>,CppConnectivityInformation=1"
fm_manage_cmd = "alarm {action} <node_id>"
fm_manage_status_cmd = "cmedit get NetworkElement=<node_id>,FmFunction=1"
pm_manage_cmd = "cmedit set NetworkElement=<node_id>,PmFunction=1 pmEnabled={boolean}"
pm_manage_status_cmd = "cmedit get NetworkElement=<node_id>,PmFunction=1"
shm_manage_cmd = "cmedit set NetworkElement=<node_id>,InventorySupervision=1 active={boolean}"
shm_manage_status_cmd = "cmedit get NetworkElement=<node_id>,SHMFunction=1,InventoryFunction=1"
shm_license_sync_status_cmd = "cmedit get MeContext={node_id},Inventory=1,LicenseInventory=1"

# SYNC operation (sync node)
sync_cmd = "cmedit action NetworkElement=<node_id>,CmFunction=1 sync"

# GET operations
get_node_fingerprint = "cmedit get <node_id> Licensing.fingerprint"
get_all_networkelements_query = "cmedit get * NetworkElement"

# DELETE operation (Delete Node)
delete_networkelement_verify_supervision_disabled_cmd = "cmedit action NetworkElement=<node_id>,CmFunction=1 deleteNrmDataFromEnm"
delete_networkelement_tree_cmd = "cmedit delete NetworkElement=<node_id> -ALL"
delete_networkelement_tree_cmd_verification = instance(s) deleted
delete_nrm_tree_cmd_verification = instance(s) deleted
delete_subnetwork_cmd = "cmedit delete {subnetwork}"

# PIB operation
#
pib_script_query = "/ericsson/pib-scripts/etc/config.py {command} --name={parameter} --value={value} --app_server_address={instance}:8080"

# CHECK operation (check sync node)
check_sync_status_cmd = "cmedit get * NetworkElement.networkElementId==<node_id>, CmFunction.syncStatus"
check_generation_counter = "cmedit get * NetworkElement.networkElementId==<node_id>, cppConnectivityInformation.generationCounter"
check_enodeb_function = "cmedit get * MeContext;ManagedElement;ENodeBFunction"

# SHM operation
#
get_enm_shm_fingerprints_cmd = "cmedit get * licensing.fingerprint -t"
shm_import_license_cmd = "shm import -l file:{file}"
get_oss_shm_fingerprints_cmd = "smotool exportfingerprints"

# SCRIPT ENGINE
#
script_engine_command_post_endpoint = /script-engine/services/command
script_engine_command_poll_endpoint = /script-engine/services/command/status
script_engine_command_response_get_endpoint = /script-engine/services/command/output/
script_engine_command_files_endpoint = /script-engine/services/files
script_engine_pm_get_scanners_by_id = cmedit get {nodes} PMICScannerInfo.(id=="{id}")
script_engine_command_timeout = 600

# USER MANAGER
#
openidm_security_header = {"X-Requested-With": "XMLHttpRequest"}
openidm_user_url = {apache_hostname_url}/openidm/managed/user/{username}
query_all_users_url = {apache_hostname_url}/oss/idm/usermanagement/users

# ROLE MANAGER
#
enm_admin_creds_file = /tmp/nssutils/enm-credentials

# ENM
#
enm_list_svc_nodes = "grep -E 'svc-[0-9]+\s' /etc/hosts | awk '{ print $2, $1 }'"

# NETWORK
#
get_supported_model_info_cmd = cmedit describe --netype {model} --table

#########################
# DUMP-STASH
#########################
elasticsearch_url = "%s/elasticsearch/_all/_search"
elasticsearch_fields = "["timestamp", "host", "program", "message"]"
elastic_default_size = 99999999
elasticsearch_log_query = "{"sort": [{"timestamp": {"order": "asc"}}], "fields": ["timestamp", "host", "program", "message"], "query": {"bool": {"must": [{"match": {"program": "%s"}}, {"range": {"timestamp": {"from": "%s", "to": "%s"}}}], "must_not": [{"match": {"program": "%s"}}, {"match": {"message": "IPTABLES_DROPPED_PACKETIN"}}]}}, "from": 0, "size": %d}"
elasticsearch_log_list_query = "{"aggregations": {"tag": {"terms": {"field": "program", "size": %d}}}, "size": 0}"

# SHM
#
shm_software_package_list_endpoint = {apache_hostname_url}/oss/shm/rest/softwarePackage/list
shm_software_package_upload_endpoint = {apache_hostname_url}/oss/shm/rest/softwarePackage/import
shm_software_package_delete_endpoint = {apache_hostname_url}/oss/shm/rest/softwarePackage/delete
shm_list_license_keys_endpoint = {apache_hostname_url}/oss/shm/rest/license/importedFiles
